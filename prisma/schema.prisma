generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  birthday           DateTime?
  phone              String?
  role               UserRole  @default(CUSTOMER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isTwoFactorEnabled Boolean   @default(false)
  lockUntil          DateTime?
  loginAttempts      Int       @default(0)
  twoFactorSecret    String?
  discord            String?
  // Suspension fields
  isSuspended        Boolean   @default(false)
  suspensionReason   String?
  suspensionEndsAt   DateTime?
  customer           Customer?
  partner            Partner?
  reviewsReceived    Review[]  @relation("Reviewee")
  reviewsGiven       Review[]  @relation("Reviewer")
}

model Partner {
  id              String        @id @default(cuid())
  name            String
  birthday        DateTime
  phone           String
  coverImage      String
  games           String[]
  bankAccount     String?
  inviteCode      String?
  invitedBy       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isAvailableNow  Boolean       @default(false)
  userId          String        @unique
  status          PartnerStatus @default(PENDING)
  isRankBooster   Boolean       @default(false)
  rankBoosterNote String?
  rankBoosterRank String?
  customerMessage String?
  halfHourlyRate  Float
  images          String[]      @default([])
  user            User          @relation(fields: [userId], references: [id])
  schedules       Schedule[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  birthday  DateTime
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lineId    String?   @unique
  userId    String    @unique
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Schedule {
  id          String   @id @default(cuid())
  partnerId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking?
  partner     Partner  @relation(fields: [partnerId], references: [id])
}

model Booking {
  id           String        @id @default(cuid())
  customerId   String
  scheduleId   String        @unique
  status       BookingStatus @default(PENDING)
  orderNumber  String?       // 訂單編號
  paymentInfo  Json?         // 付款資訊
  paymentError String?       // 付款錯誤訊息
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reminderSent Boolean       @default(false)
  rejectReason String?
  promoCode    String?
  discountAmount Float       @default(0)
  originalAmount Float
  finalAmount   Float
  customer     Customer      @relation(fields: [customerId], references: [id])
  schedule     Schedule      @relation(fields: [scheduleId], references: [id])
  orders       Order[]
  reviews      Review[]
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  bookingId  String
  amount     Int
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
}

enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}

enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

model PromoCode {
  id          String        @id @default(cuid())
  code        String        @unique
  type        PromoCodeType
  value       Float         // 折扣值或固定減免金額
  maxUses     Int           @default(-1) // -1 表示無限制
  usedCount   Int           @default(0)
  validFrom   DateTime      @default(now())
  validUntil  DateTime?
  isActive    Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PromoCodeType {
  PERCENTAGE  // 百分比折扣
  FIXED       // 固定金額減免
}
