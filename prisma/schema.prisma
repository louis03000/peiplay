generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  birthday           DateTime?
  phone              String?
  role               UserRole  @default(CUSTOMER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isTwoFactorEnabled Boolean   @default(false)
  lockUntil          DateTime?
  loginAttempts      Int       @default(0)
  twoFactorSecret    String?
  discord            String?
  isSuspended        Boolean   @default(false)
  suspensionEndsAt   DateTime?
  suspensionReason   String?
  customer           Customer?
  partner            Partner?
  reviewsReceived    Review[]  @relation("Reviewee")
  reviewsGiven       Review[]  @relation("Reviewer")
  userCoins          UserCoins?
  rechargeRecords    RechargeRecord[]
  coinTransactions   CoinTransaction[]
  giftRecordsSent    GiftRecord[] @relation("GiftSender")
  giftRecordsReceived GiftRecord[] @relation("GiftReceiver")
  partnerEarnings    PartnerEarnings?
}

model Partner {
  id                String        @id @default(cuid())
  name              String
  birthday          DateTime
  phone             String
  coverImage        String
  games             String[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isAvailableNow    Boolean       @default(false)
  userId            String        @unique
  status            PartnerStatus @default(PENDING)
  isRankBooster     Boolean       @default(false)
  rankBoosterNote   String?
  rankBoosterRank   String?
  customerMessage   String?
  halfHourlyRate    Float
  images            String[]      @default([])
  inviteCode        String?
  invitedBy         String?
  bankAccountNumber String?
  bankCode          String?
  contractFile      String?
  user              User          @relation(fields: [userId], references: [id])
  schedules         Schedule[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  birthday  DateTime
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lineId    String?   @unique
  userId    String    @unique
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Schedule {
  id          String   @id @default(cuid())
  partnerId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking?
  partner     Partner  @relation(fields: [partnerId], references: [id])
}

model Booking {
  id             String        @id @default(cuid())
  customerId     String
  scheduleId     String        @unique
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  reminderSent   Boolean       @default(false)
  rejectReason   String?
  discountAmount Float         @default(0)
  finalAmount    Float
  originalAmount Float
  promoCode      String?
  orderNumber    String?
  paymentError   String?
  paymentInfo    Json?
  customer       Customer      @relation(fields: [customerId], references: [id])
  schedule       Schedule      @relation(fields: [scheduleId], references: [id])
  orders         Order[]
  reviews        Review[]
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  bookingId  String
  amount     Int
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
}

model PromoCode {
  id          String        @id @default(cuid())
  code        String        @unique
  type        PromoCodeType
  value       Float
  maxUses     Int           @default(-1)
  usedCount   Int           @default(0)
  validFrom   DateTime      @default(now())
  validUntil  DateTime?
  isActive    Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model UserCoins {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  coinBalance     Int      @default(0)
  totalRecharged  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])

  @@map("UserCoins")
}

model RechargeRecord {
  id            Int      @id @default(autoincrement())
  userId        String
  coinAmount    Int
  paymentAmount Decimal  @db.Decimal(10, 2)
  paymentMethod String?
  status        String   @default("PENDING")
  orderNumber   String   @unique
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])

  @@map("RechargeRecord")
}

model CoinTransaction {
  id            Int      @id @default(autoincrement())
  userId        String
  transactionType String
  amount        Int
  description   String?
  relatedId     String?
  balanceBefore Int
  balanceAfter  Int
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])

  @@map("CoinTransaction")
}

model GiftItem {
  id            Int      @id @default(autoincrement())
  name          String
  emoji         String
  coinCost      Int
  partnerShare  Decimal  @db.Decimal(3, 2)
  platformShare Decimal  @db.Decimal(3, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())

  giftRecords   GiftRecord[]

  @@map("GiftItem")
}

model GiftRecord {
  id                  Int      @id @default(autoincrement())
  senderId            String
  receiverId          String
  giftId              Int
  coinsSpent          Int
  partnerEarnedCoins  Int
  platformEarnedCoins Int
  discordChannelId    String?
  createdAt           DateTime @default(now())

  sender              User     @relation("GiftSender", fields: [senderId], references: [id])
  receiver            User     @relation("GiftReceiver", fields: [receiverId], references: [id])
  gift                GiftItem @relation(fields: [giftId], references: [id])

  @@map("GiftRecord")
}

model PartnerEarnings {
  id                    Int       @id @default(autoincrement())
  partnerId             String    @unique
  totalEarnedCoins      Int       @default(0)
  pendingEarningsCoins  Int       @default(0)
  settledEarningsCoins  Int       @default(0)
  lastSettlementDate    DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  partner               User      @relation(fields: [partnerId], references: [id])

  @@map("PartnerEarnings")
}

enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}

enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  PENDING_PAYMENT
  PAID_WAITING_PARTNER_CONFIRMATION
  PARTNER_ACCEPTED
  PARTNER_REJECTED
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
  COMPLETED_WITH_AMOUNT_MISMATCH
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}
