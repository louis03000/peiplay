// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  birthday      DateTime?
  phone         String?
  role          UserRole  @default(CUSTOMER)
  discord       String?
  customer      Customer?
  partner       Partner?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviewsGiven   Review[] @relation("Reviewer")
  reviewsReceived Review[] @relation("Reviewee")
  
  // 2FA fields
  twoFactorSecret String?
  isTwoFactorEnabled Boolean @default(false)
  
  // Rate limiting fields
  loginAttempts Int @default(0)
  lockUntil DateTime?
}

enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}

model Partner {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  name        String
  birthday    DateTime
  phone       String
  coverImage  String
  games       String[]
  hourlyRate  Float
  schedules   Schedule[]
  isAvailableNow Boolean  @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      PartnerStatus @default(PENDING)
}

enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
}

model Customer {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  name        String
  birthday    DateTime
  phone       String
  bookings    Booking[]
  orders      Order[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  lineId      String?     @unique
}

model Schedule {
  id          String      @id @default(cuid())
  partnerId   String
  partner     Partner     @relation(fields: [partnerId], references: [id])
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean     @default(true)
  bookings    Booking[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Booking {
  id          String      @id @default(cuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  scheduleId  String      @unique
  schedule    Schedule    @relation(fields: [scheduleId], references: [id])
  status      BookingStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  reminderSent Boolean   @default(false)
  orders      Order[]
  reviews     Review[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Order {
  id          String   @id @default(cuid())
  customerId  String
  bookingId   String
  amount      Int
  createdAt   DateTime @default(now())

  customer    Customer @relation(fields: [customerId], references: [id])
  booking     Booking  @relation(fields: [bookingId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  bookingId   String
  reviewerId  String   // User id
  revieweeId  String   // User id
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())

  booking     Booking  @relation(fields: [bookingId], references: [id])
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee    User     @relation("Reviewee", fields: [revieweeId], references: [id])
}
