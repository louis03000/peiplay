generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String        @id @default(cuid())
  email                    String        @unique
  password                 String
  name                     String?
  birthday                 DateTime?
  phone                    String?
  role                     UserRole      @default(CUSTOMER)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  isTwoFactorEnabled       Boolean       @default(false)
  lockUntil                DateTime?
  loginAttempts            Int           @default(0)
  twoFactorSecret          String?
  discord                  String?
  isSuspended              Boolean       @default(false)
  suspensionEndsAt         DateTime?
  suspensionReason         String?
  emailVerified            Boolean       @default(false)
  emailVerificationCode    String?
  emailVerificationExpires DateTime?
  emailNotifications       Boolean       @default(true)
  messageNotifications     Boolean       @default(true)
  bookingNotifications     Boolean       @default(true)
  twoFactorEnabled         Boolean       @default(false)
  loginAlerts              Boolean       @default(true)
  securityAlerts           Boolean       @default(true)
  customer                 Customer?
  partner                  Partner?
  reviewsReceived          Review[]      @relation("Reviewee")
  reviewsGiven             Review[]      @relation("Reviewer")
  securityLogs             SecurityLog[]
  messagesSent             Message[]     @relation("MessageSender")
  messagesReceived         Message[]     @relation("MessageReceiver")
  notifications            Notification[]
  announcements            Announcement[] @relation("AnnouncementCreator")
  personalNotificationsReceived PersonalNotification[] @relation("PersonalNotificationReceiver")
  personalNotificationsSent     PersonalNotification[] @relation("PersonalNotificationSender")
  adminMessagesReceived         AdminMessage[] @relation("AdminMessageReceiver")
  adminMessagesSent             AdminMessage[] @relation("AdminMessageSender")
}

model Partner {
  id                      String                    @id @default(cuid())
  name                    String
  birthday                DateTime
  phone                   String
  coverImage              String
  games                   String[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isAvailableNow          Boolean                   @default(false)
  availableNowSince       DateTime?
  userId                  String                    @unique
  status                  PartnerStatus             @default(PENDING)
  isRankBooster           Boolean                   @default(false)
  rankBoosterNote         String?
  rankBoosterRank         String?
  rankBoosterImages       String[]                  @default([])
  customerMessage         String?
  halfHourlyRate          Float
  chatHourlyRate          Float?
  images                  String[]                  @default([])
  inviteCode              String?
  invitedBy               String?
  bankAccountNumber       String?
  bankCode                String?
  contractFile            String?
  referralEarnings        Float                     @default(0)
  referralCount           Int                       @default(0)
  totalReferralEarnings   Float                     @default(0)
  referralPlatformFee     Float                     @default(10.00)
  referralBonusPercentage Float                     @default(5.00)
  noResponseCount         Int                       @default(0)
  lastNoResponseReset     DateTime?
  allowGroupBooking       Boolean                   @default(false)
  // 新增欄位
  interests               String[]                  @default([])  // 興趣
  gender                  String?                   // 性別
  idVerificationPhoto     String?                   // 身分證自拍
  idVerificationStatus    IdVerificationStatus      @default(PENDING) // 身分驗證狀態
  supportsChatOnly        Boolean                   @default(false) // 是否支援純聊天
  chatOnlyRate            Float?                    // 純聊天收費
  FavoritePartner         FavoritePartner[]
  GroupBookingParticipant GroupBookingParticipant[]
  user                    User                      @relation(fields: [userId], references: [id])
  referralsReceived       ReferralRecord?           @relation("Invitee")
  referralsGiven          ReferralRecord[]          @relation("Inviter")
  schedules               Schedule[]
  withdrawalRequests      WithdrawalRequest[]
}

model Customer {
  id                      String                    @id @default(cuid())
  name                    String
  birthday                DateTime
  phone                   String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  lineId                  String?                   @unique
  userId                  String                    @unique
  bookings                Booking[]
  user                    User                      @relation(fields: [userId], references: [id])
  FavoritePartner         FavoritePartner[]
  GroupBookingParticipant GroupBookingParticipant[]
  GroupBookingReview      GroupBookingReview[]
  orders                  Order[]
}

model Schedule {
  id          String   @id @default(cuid())
  partnerId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking?
  partner     Partner  @relation(fields: [partnerId], references: [id])
}

model Booking {
  id                        String            @id @default(cuid())
  customerId                String
  scheduleId                String            @unique
  status                    BookingStatus     @default(PENDING)
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  reminderSent              Boolean           @default(false)
  rejectReason              String?
  discountAmount            Float             @default(0)
  finalAmount               Float
  originalAmount            Float
  promoCode                 String?
  orderNumber               String?
  paymentError              String?
  paymentInfo               Json?
  discordEarlyTextChannelId String?
  discordTextChannelId      String?
  discordVoiceChannelId     String?
  extensionButtonShown      Boolean           @default(false)
  ratingCompleted           Boolean           @default(false)
  textChannelCleaned        Boolean           @default(false)
  partnerResponseDeadline   DateTime?
  isWaitingPartnerResponse  Boolean           @default(false)
  serviceType               String            @default("GAMING")
  groupBookingId            String?
  isGroupBooking            Boolean           @default(false)
  customer                  Customer          @relation(fields: [customerId], references: [id])
  groupBooking              GroupBooking?     @relation(fields: [groupBookingId], references: [id])
  schedule                  Schedule          @relation(fields: [scheduleId], references: [id])
  orders                    Order[]
  referralEarnings          ReferralEarning[]
  reviews                   Review[]
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  bookingId  String
  amount     Int
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model GroupBooking {
  id                      String                    @id @default(cuid())
  type                    GroupBookingType
  title                   String?
  description             String?
  date                    DateTime
  startTime               DateTime
  endTime                 DateTime
  maxParticipants         Int                       @default(10)
  currentParticipants     Int                       @default(0)
  pricePerPerson          Float?
  totalPrice              Float?
  status                  GroupBookingStatus        @default(ACTIVE)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  initiatorId             String
  initiatorType           String
  discordTextChannelId    String?
  discordVoiceChannelId   String?
  bookings                Booking[]
  GroupBookingParticipant GroupBookingParticipant[]
  GroupBookingReview      GroupBookingReview[]

  @@index([date, startTime])
  @@index([status])
}

model Review {
  id         String    @id @default(cuid())
  bookingId  String
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  isApproved Boolean   @default(false)
  approvedAt DateTime?
  booking    Booking   @relation(fields: [bookingId], references: [id])
  reviewee   User      @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer   User      @relation("Reviewer", fields: [reviewerId], references: [id])
}

model PromoCode {
  id           String        @id @default(cuid())
  code         String        @unique
  type         PromoCodeType
  value        Float
  minimumSpend Float?
  maxUses      Int           @default(-1)
  usedCount    Int           @default(0)
  validFrom    DateTime      @default(now())
  validUntil   DateTime?
  isActive     Boolean       @default(true)
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WithdrawalRequest {
  id          String           @id @default(cuid())
  partnerId   String
  amount      Float
  status      WithdrawalStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  processedAt DateTime?
  adminNote   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  partner     Partner          @relation(fields: [partnerId], references: [id])
}

model PairingRecord {
  id            String   @id @default(cuid())
  user1Id       String
  user2Id       String
  timestamp     DateTime @default(now())
  extendedTimes Int      @default(0)
  duration      Int
  rating        Int?
  comment       String?
  animalName    String
  bookingId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ReferralRecord {
  id         String            @id @default(cuid())
  inviterId  String
  inviteeId  String            @unique
  inviteCode String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  earnings   ReferralEarning[]
  invitee    Partner           @relation("Invitee", fields: [inviteeId], references: [id])
  inviter    Partner           @relation("Inviter", fields: [inviterId], references: [id])
}

model ReferralEarning {
  id               String         @id @default(cuid())
  referralRecordId String
  bookingId        String
  amount           Float
  percentage       Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  booking          Booking        @relation(fields: [bookingId], references: [id])
  referralRecord   ReferralRecord @relation(fields: [referralRecordId], references: [id])
}

model SecurityLog {
  id        String            @id @default(cuid())
  userId    String
  eventType SecurityEventType
  details   String
  ipAddress String
  userAgent String
  timestamp DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([ipAddress, timestamp])
}

model FavoritePartner {
  id         String   @id
  customerId String
  partnerId  String
  createdAt  DateTime @default(now())
  Customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Partner    Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([customerId, partnerId])
  @@index([customerId])
  @@index([partnerId])
}

model GroupBookingParticipant {
  id             String            @id
  groupBookingId String
  customerId     String
  partnerId      String?
  status         ParticipantStatus @default(ACTIVE)
  joinedAt       DateTime          @default(now())
  Customer       Customer          @relation(fields: [customerId], references: [id])
  GroupBooking   GroupBooking      @relation(fields: [groupBookingId], references: [id])
  Partner        Partner?          @relation(fields: [partnerId], references: [id])

  @@unique([groupBookingId, customerId])
}

model GroupBookingReview {
  id             String       @id
  groupBookingId String
  reviewerId     String
  rating         Int
  comment        String?
  createdAt      DateTime     @default(now())
  isApproved     Boolean      @default(false)
  GroupBooking   GroupBooking @relation(fields: [groupBookingId], references: [id])
  Customer       Customer     @relation(fields: [reviewerId], references: [id])

  @@unique([groupBookingId, reviewerId])
}

enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}

enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  PENDING_PAYMENT
  PAID_WAITING_PARTNER_CONFIRMATION
  PARTNER_ACCEPTED
  PARTNER_REJECTED
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
  COMPLETED_WITH_AMOUNT_MISMATCH
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_CHANGE
  PASSWORD_RESET
  SUSPICIOUS_ACTIVITY
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  EMAIL_VERIFIED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
}

enum GroupBookingStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  FULL
}

enum GroupBookingType {
  USER_INITIATED
  PARTNER_INITIATED
}

enum ParticipantStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum IdVerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AnnouncementType {
  SYSTEM_NOTICE    // 系統通知
  ACTIVITY_NOTICE   // 活動公告
  SYSTEM_ANNOUNCEMENT // 系統公告
}

model Message {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@index([receiverId, isRead])
  @@index([senderId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  type      String   @default("info")
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
}

model Announcement {
  id          String            @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType
  isActive    Boolean           @default(true)
  expiresAt   DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String            // 創建者 ID
  creator     User              @relation("AnnouncementCreator", fields: [createdBy], references: [id])

  @@index([isActive, expiresAt])
}

// 個人通知系統
model PersonalNotification {
  id          String   @id @default(cuid())
  userId      String   // 接收者 ID
  senderId    String   // 發送者 ID (管理員)
  title       String
  content     String
  type        NotificationType  // 通知類型
  priority    Priority         @default(MEDIUM) // 優先級
  isRead      Boolean          @default(false)
  isImportant Boolean          @default(false) // 重要通知
  expiresAt   DateTime?        // 過期時間
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  user        User             @relation("PersonalNotificationReceiver", fields: [userId], references: [id])
  sender      User             @relation("PersonalNotificationSender", fields: [senderId], references: [id])

  @@index([userId, isRead])
  @@index([userId, isImportant])
}

// 管理員私訊系統
model AdminMessage {
  id          String   @id @default(cuid())
  userId      String   // 接收者 ID
  adminId     String   // 管理員 ID
  content     String
  isRead      Boolean  @default(false)
  isFromAdmin Boolean  @default(true) // true: 管理員發送, false: 用戶回覆
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation("AdminMessageReceiver", fields: [userId], references: [id])
  admin       User     @relation("AdminMessageSender", fields: [adminId], references: [id])

  @@index([userId, isRead])
  @@index([userId, createdAt])
}

// 通知類型枚舉
enum NotificationType {
  WARNING     // 警告
  VIOLATION   // 違規
  REMINDER    // 提醒
  INFO        // 一般資訊
  SYSTEM      // 系統通知
}

// 優先級枚舉
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
