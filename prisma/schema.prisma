generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  birthday           DateTime?
  phone              String?
  role               UserRole  @default(CUSTOMER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isTwoFactorEnabled Boolean   @default(false)
  lockUntil          DateTime?
  loginAttempts      Int       @default(0)
  twoFactorSecret    String?
  discord            String?
  isSuspended        Boolean   @default(false)
  suspensionEndsAt   DateTime?
  suspensionReason   String?
  emailVerified      Boolean   @default(false)
  emailVerificationCode String?
  emailVerificationExpires DateTime?
  // 用戶設定
  emailNotifications Boolean  @default(true)
  messageNotifications Boolean @default(true)
  bookingNotifications Boolean @default(true)
  twoFactorEnabled   Boolean  @default(false)
  loginAlerts        Boolean  @default(true)
  securityAlerts     Boolean  @default(true)
  customer           Customer?
  partner            Partner?
  reviewsReceived    Review[]  @relation("Reviewee")
  reviewsGiven       Review[]  @relation("Reviewer")
  securityLogs       SecurityLog[]
}

model Partner {
  id                String        @id @default(cuid())
  name              String
  birthday          DateTime
  phone             String
  coverImage        String
  games             String[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isAvailableNow    Boolean       @default(false)
  availableNowSince DateTime?
  userId            String        @unique
  status            PartnerStatus @default(PENDING)
  isRankBooster     Boolean       @default(false)
  rankBoosterNote   String?
  rankBoosterRank   String?
  rankBoosterImages String[]      @default([])
  customerMessage   String?
  halfHourlyRate    Float
  images            String[]      @default([])
  inviteCode        String?
  invitedBy         String?
  bankAccountNumber String?
  bankCode          String?
  contractFile      String?
  // 推薦系統相關欄位
  referralEarnings  Float         @default(0)
  referralCount     Int           @default(0)
  totalReferralEarnings Float     @default(0)
  // 推薦配置（每個夥伴可以有不同的配置）
  referralPlatformFee Float       @default(10.00)  // 推薦後的平台抽成比例
  referralBonusPercentage Float   @default(5.00)   // 推薦人獲得的差額比例
  user              User          @relation(fields: [userId], references: [id])
  schedules         Schedule[]
  withdrawalRequests WithdrawalRequest[]
  // 推薦關係
  referralsGiven    ReferralRecord[] @relation("Inviter")
  referralsReceived ReferralRecord[] @relation("Invitee")
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  birthday  DateTime
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lineId    String?   @unique
  userId    String    @unique
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Schedule {
  id          String   @id @default(cuid())
  partnerId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking?
  partner     Partner  @relation(fields: [partnerId], references: [id])
}

model Booking {
  id                          String        @id @default(cuid())
  customerId                  String
  scheduleId                  String        @unique
  status                      BookingStatus @default(PENDING)
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  reminderSent                Boolean       @default(false)
  rejectReason                String?
  discountAmount              Float         @default(0)
  finalAmount                 Float
  originalAmount              Float
  promoCode                   String?
  orderNumber                 String?
  paymentError                String?
  paymentInfo                 Json?
  discordEarlyTextChannelId   String?       // 提前溝通文字頻道 ID
  discordTextChannelId        String?       // 正式文字頻道 ID
  discordVoiceChannelId       String?       // 語音頻道 ID
  extensionButtonShown        Boolean       @default(false) // 延長按鈕是否已顯示
  ratingCompleted             Boolean       @default(false) // 評價是否已完成
  textChannelCleaned          Boolean       @default(false) // 文字頻道是否已清理
  customer                    Customer      @relation(fields: [customerId], references: [id])
  schedule                    Schedule      @relation(fields: [scheduleId], references: [id])
  orders                      Order[]
  reviews        Review[]
  referralEarnings ReferralEarning[]
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  bookingId  String
  amount     Int
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
}

model PromoCode {
  id          String        @id @default(cuid())
  code        String        @unique
  type        PromoCodeType
  value       Float
  maxUses     Int           @default(-1)
  usedCount   Int           @default(0)
  validFrom   DateTime      @default(now())
  validUntil  DateTime?
  isActive    Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WithdrawalRequest {
  id          String              @id @default(cuid())
  partnerId   String
  amount      Float
  status      WithdrawalStatus    @default(PENDING)
  requestedAt DateTime            @default(now())
  processedAt DateTime?
  adminNote   String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  partner     Partner             @relation(fields: [partnerId], references: [id])
}

model PairingRecord {
  id            String   @id @default(cuid())
  user1Id       String
  user2Id       String
  timestamp     DateTime @default(now())
  extendedTimes Int      @default(0)
  duration      Int
  rating        Int?
  comment       String?
  animalName    String
  bookingId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ReferralRecord {
  id         String   @id @default(cuid())
  inviterId  String
  inviteeId  String   @unique
  inviteCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  inviter    Partner  @relation("Inviter", fields: [inviterId], references: [id])
  invitee    Partner  @relation("Invitee", fields: [inviteeId], references: [id])
  earnings   ReferralEarning[]
}

model ReferralEarning {
  id                String         @id @default(cuid())
  referralRecordId  String
  bookingId         String
  amount            Float
  percentage        Float
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  referralRecord    ReferralRecord @relation(fields: [referralRecordId], references: [id])
  booking           Booking        @relation(fields: [bookingId], references: [id])
}




enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}


enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  PENDING_PAYMENT
  PAID_WAITING_PARTNER_CONFIRMATION
  PARTNER_ACCEPTED
  PARTNER_REJECTED
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
  COMPLETED_WITH_AMOUNT_MISMATCH
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_CHANGE
  PASSWORD_RESET
  SUSPICIOUS_ACTIVITY
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  EMAIL_VERIFIED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
}

model SecurityLog {
  id          String           @id @default(cuid())
  userId      String
  eventType   SecurityEventType
  details     String           // JSON 格式的詳細信息
  ipAddress   String
  userAgent   String
  timestamp   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([ipAddress, timestamp])
}
