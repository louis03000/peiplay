generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  birthday           DateTime?
  phone              String?
  role               UserRole  @default(CUSTOMER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isTwoFactorEnabled Boolean   @default(false)
  lockUntil          DateTime?
  loginAttempts      Int       @default(0)
  twoFactorSecret    String?
  discord            String?
  isSuspended        Boolean   @default(false)
  suspensionEndsAt   DateTime?
  suspensionReason   String?
  emailVerified      Boolean   @default(false)
  emailVerificationCode String?
  emailVerificationExpires DateTime?
  customer           Customer?
  partner            Partner?
  reviewsReceived    Review[]  @relation("Reviewee")
  reviewsGiven       Review[]  @relation("Reviewer")
  sentMessages       Message[] @relation("SentMessages")
  receivedMessages   Message[] @relation("ReceivedMessages")
  notifications      Notification[]
}

model Partner {
  id                String        @id @default(cuid())
  name              String
  birthday          DateTime
  phone             String
  coverImage        String
  games             String[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isAvailableNow    Boolean       @default(false)
  availableNowSince DateTime?
  userId            String        @unique
  status            PartnerStatus @default(PENDING)
  isRankBooster     Boolean       @default(false)
  rankBoosterNote   String?
  rankBoosterRank   String?
  rankBoosterImages String[]      @default([])
  customerMessage   String?
  halfHourlyRate    Float
  images            String[]      @default([])
  inviteCode        String?
  invitedBy         String?
  bankAccountNumber String?
  bankCode          String?
  contractFile      String?
  user              User          @relation(fields: [userId], references: [id])
  schedules         Schedule[]
  withdrawalRequests WithdrawalRequest[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  birthday  DateTime
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lineId    String?   @unique
  userId    String    @unique
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Schedule {
  id          String   @id @default(cuid())
  partnerId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking?
  partner     Partner  @relation(fields: [partnerId], references: [id])
}

model Booking {
  id             String        @id @default(cuid())
  customerId     String
  scheduleId     String        @unique
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  reminderSent   Boolean       @default(false)
  rejectReason   String?
  discountAmount Float         @default(0)
  finalAmount    Float
  originalAmount Float
  promoCode      String?
  orderNumber    String?
  paymentError   String?
  paymentInfo    Json?
  discordTextChannelId String?
  discordVoiceChannelId String?
  customer       Customer      @relation(fields: [customerId], references: [id])
  schedule       Schedule      @relation(fields: [scheduleId], references: [id])
  orders         Order[]
  reviews        Review[]
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  bookingId  String
  amount     Int
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String
  reviewerId String
  revieweeId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
}

model PromoCode {
  id          String        @id @default(cuid())
  code        String        @unique
  type        PromoCodeType
  value       Float
  maxUses     Int           @default(-1)
  usedCount   Int           @default(0)
  validFrom   DateTime      @default(now())
  validUntil  DateTime?
  isActive    Boolean       @default(true)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WithdrawalRequest {
  id          String              @id @default(cuid())
  partnerId   String
  amount      Float
  status      WithdrawalStatus    @default(PENDING)
  requestedAt DateTime            @default(now())
  processedAt DateTime?
  adminNote   String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  partner     Partner             @relation(fields: [partnerId], references: [id])
}

model PairingRecord {
  id            String   @id @default(cuid())
  user1Id       String
  user2Id       String
  timestamp     DateTime @default(now())
  extendedTimes Int      @default(0)
  duration      Int
  rating        Int?
  comment       String?
  animalName    String
  bookingId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Message {
  id          String      @id @default(cuid())
  senderId    String
  receiverId  String
  subject     String
  content     String
  type        MessageType @default(PRIVATE)
  isRead      Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  relatedId   String?     // 相關的預約ID或其他關聯ID
  attachments String[]    @default([])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  isDeleted Boolean          @default(false)
  data      Json?            // 額外的通知數據
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  user      User             @relation(fields: [userId], references: [id])
}



enum UserRole {
  CUSTOMER
  PARTNER
  ADMIN
}

enum MessageType {
  PRIVATE      // 私信
  SYSTEM       // 系統通知
  BOOKING      // 預約相關
  ADMIN        // 管理員廣播
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_REMINDER
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PARTNER_APPLICATION
  SYSTEM_ANNOUNCEMENT
  MESSAGE_RECEIVED
}

enum PartnerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  PENDING_PAYMENT
  PAID_WAITING_PARTNER_CONFIRMATION
  PARTNER_ACCEPTED
  PARTNER_REJECTED
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
  COMPLETED_WITH_AMOUNT_MISMATCH
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
